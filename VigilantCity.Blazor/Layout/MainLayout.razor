@using System.Text.Json
@using VigilantCity.Core.Models
@using VigilantCity.Core.Services.Interfaces
@inject ICityLoader cityLoader
@inject IJSRuntime jsRuntime
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager navigationManager

@inherits LayoutComponentBase
<div class="page">
    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center bg-dark">
            <a class="header" href="/"><h1>Vigilant City</h1></a>
            <div class="d-flex align-items-center">
                <a class="btn btn-link" href="/heroes" title="Heroes">
                    <i class="fa-solid fa-mask"></i>
                </a>
                <a class="btn btn-link" href="/prison" title="Prison">
                    <i class="fa-solid fa-handcuffs"></i>
                </a>
                <a class="btn btn-link" href="/history" title="History">
                    <i class="fa-solid fa-history"></i>
                </a>
                <button title="Download Game Data" class="btn btn-link" @onclick="async () => await DownloadCityJsonAsync()" disabled="@(City == null)">
                    <i class="fa-solid fa-arrow-down"></i>
                </button>
                <label class="btn btn-link mb-0" title="Upload Game Data">
                    <i class="fa-solid fa-arrow-up"></i>
                    <InputFile OnChange="UploadCityJsonAsync" class="d-none" />
                </label>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    public City? City { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.City = await cityLoader.LoadCityAsync();
    }

    private async Task DownloadCityJsonAsync()
    {
        if (City != null)
        {
            var cityJson = JsonSerializer.Serialize(City);
            var bytes = System.Text.Encoding.UTF8.GetBytes(cityJson);
            var base64 = Convert.ToBase64String(bytes);
            var href = $"data:application/octet-stream;base64,{base64}";
            await jsRuntime.InvokeVoidAsync("downloadFile", href, "vigilantcity.sav");
        }
    }

    private async Task UploadCityJsonAsync(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        var json = await reader.ReadToEndAsync();
        City = JsonSerializer.Deserialize<City>(json);
        await cityLoader.SaveCityAsync(City!);
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }
}