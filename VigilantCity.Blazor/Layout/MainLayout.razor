@using System.Text.Json
@using VigilantCity.Core.Models
@using VigilantCity.Core.Services.Interfaces
@inject ICityLoader cityLoader
@inject IJSRuntime jsRuntime

@inherits LayoutComponentBase
<div class="page">
    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center bg-dark">
            <a class="header" href="/"><h1>Vigilant City</h1></a>
            <button class="btn btn-link ml-auto" @onclick="DownloadCityJson" disabled="@(City != null)">
                <i class="fa-solid fa-arrow-down"></i>
            </button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    public City? City { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.City = await cityLoader.LoadCityAsync();
    }

    private async Task DownloadCityJson()
    {
        if (City != null)
        {
            var cityJson = JsonSerializer.Serialize(City);
            var bytes = System.Text.Encoding.UTF8.GetBytes(cityJson);
            var base64 = Convert.ToBase64String(bytes);
            var href = $"data:application/octet-stream;base64,{base64}";
            await jsRuntime.InvokeVoidAsync("downloadFile", href, "city.json");
        }
    }
}