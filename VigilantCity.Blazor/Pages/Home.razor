@page "/"
@using VigilantCity.Core.Extensions
@using VigilantCity.Core.Models
@using VigilantCity.Core.Models.Enumerations
@using VigilantCity.Core.Models.Incidents
@using VigilantCity.Core.Services.Interfaces
@inject ICityLoader cityLoader;
@inject IJSRuntime jsRuntime;
@inject ICityStarter cityStarter;
@inject IIncidentFactory incidentFactory;
@inject NavigationManager Navigation;

<PageTitle>Welcome to Vigilant City</PageTitle>

<!-- Alerts Bell -->
@if (City != null)
{
    <div class="container mt-2">
        <button class="btn btn-link position-relative" @onclick="ToggleAlerts">
            <i class="fa-solid fa-bell fs-4"></i>
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                @(City.Alerts?.Count ?? 0)
                <span class="visually-hidden">alerts</span>
            </span>
        </button>
        @if (showAlerts && City.Alerts != null && City.Alerts.Any())
        {
            <div class="alert alert-info">
                <ul class="list-unstyled mb-0">
                    @foreach (var alert in City.Alerts.ToList())
                    {
                        <li class="d-flex justify-content-between align-items-center">
                            <span>@alert</span>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => DismissAlertAsync(alert)">Dismiss</button>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
}

@if (City != null)
{
    <div class="mb-4 text-center">
        <h3>@City.PlayerHero.Alias</h3>
        <p>(@City.PlayerHero.RealName)</p>
    </div>

    @if (City.Incidents != null && City.Incidents.Any())
    {
        <div class="row justify-content-center">
            <div class="col-12 col-md-6 text-center">
                <div class="list-group">
                    @foreach (var incident in City.Incidents)
                    {
                        <button class="btn btn-outline-danger list-group-item list-group-item-action" @onclick="() => NavigateToIncident(incident.Id)">
                            @($"{incident.GetFullDescription()}")
                            &Tab;
                            <i class="fa-solid fa-stopwatch" aria-hidden="true"></i> @incident.TimeToResolve
                        </button>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="mb-3 text-center">
            <button class="btn btn-primary" @onclick="PatrolAsync">Patrol</button>
        </div>
    }
}

@code {
    public City? City { get; set; }
    private bool showAlerts = false;

    protected override async Task OnInitializedAsync()
    {
        this.City = await cityLoader.LoadCityAsync();

        if (this.City == null)
        {
            Navigation.NavigateTo("/Start");
        }
        else
        {
            await base.OnInitializedAsync();
        }
    }

    private async Task PatrolAsync()
    {
        await incidentFactory.GenerateIncidents(this.City!);
    }

    private void NavigateToIncident(Guid incidentId)
    {
        Navigation.NavigateTo($"/incident/{incidentId}");
    }

    private void ToggleAlerts()
    {
        showAlerts = !showAlerts;
    }

    private async Task DismissAlertAsync(string alert)
    {
        City?.Alerts.Remove(alert);
        // Optionally, close the alert panel if no more alerts
        if (City?.Alerts.Count == 0)
        {
            showAlerts = false;
        }

        await this.cityLoader.SaveCityAsync(City!);
    }
}
