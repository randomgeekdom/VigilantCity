@page "/prison"
@using System.Linq;
@using VigilantCity.Core.Extensions
@using VigilantCity.Core.Models
@using VigilantCity.Core.Models.Characters
@using VigilantCity.Core.Models.Enumerations
@using VigilantCity.Core.Models.Incidents
@using VigilantCity.Core.Services.Interfaces
@inject ICityLoader cityLoader;
@inject IJSRuntime jsRuntime;
@inject ICityStarter cityStarter;
@inject ICityService cityService;
@inject IIncidentFactory incidentFactory;
@inject NavigationManager Navigation;

<PageTitle>Vigilant City - Prison Record</PageTitle>

@if (City != null)
{
    <h2>Prisoners</h2>

    <table class="table">
        <thead>
            <tr>
                <th>Alias</th>
                <th>Real Name</th>
                <th>Powers</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var villain in City.Villains.OrderBy(x=>x.Alias))
            {
                <tr>
                    <td title="Click to change alias" style="cursor: pointer;" @onclick="() => ChangeAliasAsync(villain)">
                        @villain.Alias
                    </td>
                    <td>@villain.RealName</td>
                    <td>
                        @if (villain.Powers != null && villain.Powers.Count > 0)
                        {
                            @string.Join(", ", villain.Powers.Select(x => $"{x.PowerSet} ({x.PowerOrigin})"))
                        }
                        else
                        {
                            <em>No Powers</em>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public City? City { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.City = await cityLoader.LoadCityAsync();
        StateHasChanged();

        if (this.City == null)
        {
            Navigation.NavigateTo("/Start");
        }
        else
        {
            await base.OnInitializedAsync();
        }
    }

    private async Task ChangeAliasAsync(Villain villain)
    {
        // Prompt for a new alias using JS interop
        var newAlias = await jsRuntime.InvokeAsync<string>("prompt", "Enter new alias:", villain.Alias);
        if (!string.IsNullOrWhiteSpace(newAlias) && newAlias != villain.Alias)
        {
            villain.Alias = newAlias;
            // Persist the change by saving the updated city, assuming the city service handles this.
            await cityLoader.SaveCityAsync(City!);
            StateHasChanged();
        }
    }
}
